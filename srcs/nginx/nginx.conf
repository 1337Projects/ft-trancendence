# load_module /etc/nginx/modules/ngx_http_modsecurity_module.so;


# Main Nginx configuration
user nginx;
worker_processes auto;

events {
    worker_connections 1024;
}



# HTTP Block
http {

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Enable ModSecurity
    # ModSecurity on;
    # ModSecurityRulesFile /etc/nginx/modsecurity/modsecurity.conf;
    # ModSecurityRulesFile /etc/nginx/modsec/modsecurity.conf;
    # modsecurity on;
    # modsecurity_rules_file /etc/nginx/modsecurity/modsecurity.conf;

    # Include OWASP CRS rules
    # include /etc/nginx/modsecurity/base_rules/*.conf;
    # include /etc/nginx/modsec/base_rules/*.conf;


    # # SSL settings (Optional, you can also move them inside the server block)
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
    # ssl_prefer_server_ciphers on;
    # ssl_session_cache shared:SSL:10m;
    # ssl_session_timeout 1d;

    # Error logging with level set to 'warn' to exclude 'notice' and below
    error_log /var/log/nginx/error.log warn;

    # Redirect HTTP to HTTPS #izd darori ola oho
    server {
        listen 80;
        server_name localhost;

        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri;
    }

    # HTTPS server block
    server {
        access_log off;

        listen 443 ssl;
        server_name localhost;

        # SSL configuration (Ensure you place the correct certificate files)
        ssl_certificate certificate.crt;
        ssl_certificate_key prv_certificate.crt;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:EECDH+AESGCM:EDH+AESGCM';
        # ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';

        # ssl_prefer_server_ciphers on;
        ssl_prefer_server_ciphers off;


        # Proxy to backend
        location /api {
            proxy_pass http://back_end:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # Timeout settings
            proxy_read_timeout 90s;
            proxy_connect_timeout 90s;
            proxy_send_timeout 90s;
        }

        location /wss/ {
            proxy_pass http://back_end:8000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /media/
        {
            proxy_pass http://back_end:8000/media/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Proxy to frontend
        location / {
            proxy_pass http://frontend:5173/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # Timeout settings
            proxy_read_timeout 90s;
            proxy_connect_timeout 90s;
            proxy_send_timeout 90s;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}

