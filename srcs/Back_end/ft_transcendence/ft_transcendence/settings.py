"""
Django settings for ft_transcendence project.

Generated by 'django-admin startproject' using Django 4.2.14.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import hvac
import os
from pathlib import Path
from dotenv import load_dotenv, dotenv_values
from datetime import timedelta
import sys

load_dotenv()

print(f'-*-*--*-*-*-*-*-*-* HERE BACKEND ? ${os.getenv("VAULT_ROOT_TOKEN")} ||  ${os.getenv("VAULT_ADDR", "http://vault:8200")}')


client = hvac.Client(url=os.getenv("VAULT_ADDR", "http://vault:8200"), token=os.getenv("VAULT_ROOT_TOKEN"))

def fetch_secrets(path):
    try:
        return client.secrets.kv.read_secret(path=path)["data"]
    except hvac.exceptions.InvalidRequest as e:
        print(f"Invalid Request: {e}")
    except hvac.exceptions.Forbidden as e:
        print(f"Permission Denied: {e}")
    except Exception as e:
        print(f"An error occurred while fetching {path}: {e}")
    return {}

# Fetch secrets from Vault
login_secrets = fetch_secrets("login")
settings_secrets = fetch_secrets("settings")

def get_secret(secrets, key, default=None):
    # print(f"L3AAAAAAR : ${secrets.get(key, default)}")
    return secrets.get(key, default)


# Assign secrets
SCOPE = get_secret(login_secrets, "scope", "email profile")
GOOGLE_KEY = get_secret(login_secrets, "google_key")
GOOGLE_SECRET = get_secret(login_secrets, "google_secret")
REDIRECT_URI_GOOGLE = get_secret(login_secrets, "redirect_uri_google")
GRANT_TYPE = get_secret(login_secrets, "grant_type")
OAUTH_URL = get_secret(login_secrets, "oauth_url")
TOKEN_URL_INTRA = get_secret(login_secrets, "token_url_intra")
CLIENT_ID_INTRA = get_secret(login_secrets, "client_id_intra")
CLIENT_SECRET_INTRA = get_secret(login_secrets, "client_secret_intra")
REDIRECT_URI_INTRA = get_secret(login_secrets, "redirect_uri_intra")
GRANT_TYPE_INTRA = get_secret(login_secrets, "grant_type_intra")
USERINFO_URL_INTRA = get_secret(login_secrets, "userinfo_url_intra")

DB_NAME = get_secret(settings_secrets, "DB_NAME")
DB_OWNER = get_secret(settings_secrets, "DB_OWNER")
PASSWORD = get_secret(settings_secrets, "PASSWORD")
HOST = get_secret(settings_secrets, "HOST")
PORT = get_secret(settings_secrets, "PORT")
EMAIL_BACKEND = get_secret(settings_secrets, "EMAIL_BACKEND")
EMAIL_HOST = get_secret(settings_secrets, "EMAIL_HOST")
EMAIL_PORT = get_secret(settings_secrets, "EMAIL_PORT")
EMAIL_USE_TLS = get_secret(settings_secrets, "EMAIL_USE_TLS", True)
EMAIL_HOST_USER = get_secret(settings_secrets, "EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = get_secret(settings_secrets, "EMAIL_HOST_PASSWORD")


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

DATABASE_URI = f"postgresql://{DB_OWNER}:{PASSWORD}@{HOST}:{PORT}/{DB_NAME}"
print("Database connection string:", DATABASE_URI)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-n)z6y-28r18$*7r)3c5i8&fvxjfpbi!=@(tl48h8e1_#la%r$+'

AUTH_USER_MODEL = 'login.User'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    "django.contrib.sites",
    'rest_framework',
    'rest_framework_simplejwt',
    "corsheaders",
    'account',
    'login',
    'chat',
    'game',
    'notifications',
    # 'game_api',
    'tournment',
    'channels',
    'django.contrib.staticfiles',
    'rest_framework.authtoken',
    'django_otp',
    'django_otp.plugins.otp_totp',
    'background_task',
    'emojies'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
}

CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173"
]
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:5173",#wa9Ila khas yt7iyd
    "https://localhost:1024",
]

ROOT_URLCONF = 'ft_transcendence.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
WSGI_APPLICATION = 'ft_transcendence.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': DB_NAME,
        'USER': DB_OWNER,
        'PASSWORD': PASSWORD,
        'HOST': HOST,
        'PORT': PORT,
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static'),
# ]
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    # 'django_otp.backends.OTPBackend',
)


CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}
ASGI_APPLICATION = "ft_transcendence.asgi.application"


# SCOPE = scope  # Now available as settings.SCOPE
