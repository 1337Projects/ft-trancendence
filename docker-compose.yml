services:
  vault:
    container_name: vault
    image: vault:ipman
    build: ./srcs/vault/.
    volumes:
      - ./vault/file:/vault/file
      - vault-data:/vault/data
    ports:
      - "8200:8200"
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - ft_transcendence


  db:
    container_name: database
    build: ./srcs/database/
    restart: always
    env_file:
      - .env
    depends_on:
      - vault
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./srcs/database/init.sql:/docker-entrypoint-init/db.d/init.sql
    networks:
      - ft_transcendence

  be:
    container_name: back_end
    build: ./srcs/Back_end/.
    image: back-end:ipman
    restart: always
    expose:
      - 8000
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - ft_transcendence

  nginx:
    container_name: nginx
    image: nginx:ipman
    build: ./srcs/nginx/.
    restart: always
    ports:
      - "8080:80"
      - "1024:443"
    networks:
      - ft_transcendence
    depends_on:
      - vault
      - be
    environment:
      - WAIT_FOR_IT_TIMEOUT=60

  redis:
    container_name: redis
    image: redis:latest
    hostname: redis 
    networks:
      - ft_transcendence  
    restart: always

volumes:
  vault-data:
    driver : local
  pgdata:
    driver : local

networks:
  ft_transcendence:
    driver: bridge
